#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* last = NULL;

// Create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert at end
void insertEnd(int data) {
    struct Node* newNode = createNode(data);
    if (last == NULL) {
        newNode->next = newNode;
        last = newNode;
    } else {
        newNode->next = last->next;
        last->next = newNode;
        last = newNode;
    }
    printf("Inserted %d at end.\n", data);
}

// Insert at front
void insertFront(int data) {
    struct Node* newNode = createNode(data);
    if (last == NULL) {
        newNode->next = newNode;
        last = newNode;
    } else {
        newNode->next = last->next;
        last->next = newNode;
    }
    printf("Inserted %d at front.\n", data);
}

// Insert at specific position
void insertAtPosition(int data, int pos) {
    if (pos < 0) {
        printf("Invalid position.\n");
        return;
    }

    struct Node* newNode = createNode(data);

    if (pos == 0) {
        if (last == NULL) {
            newNode->next = newNode;
            last = newNode;
        } else {
            newNode->next = last->next;
            last->next = newNode;
        }
        printf("Inserted %d at position 0.\n", data);
        return;
    }

    if (last == NULL) {
        printf("Position out of bounds. List is empty.\n");
        free(newNode);
        return;
    }

    struct Node* temp = last->next;
    for (int i = 0; i < pos - 1; i++) {
        temp = temp->next;
        if (temp == last->next) {
            printf("Position out of bounds.\n");
            free(newNode);
            return;
        }
    }

    newNode->next = temp->next;
    temp->next = newNode;

    if (temp == last) {
        last = newNode;
    }

    printf("Inserted %d at position %d.\n", data, pos);
}

// Delete from front
void deleteFront() {
    if (last == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = last->next;
    if (last == last->next) {
        last = NULL;
    } else {
        last->next = temp->next;
    }
    printf("Deleted node from front: %d\n", temp->data);
    free(temp);
}

// Delete from end
void deleteEnd() {
    if (last == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = last->next;
    if (last == last->next) {
        printf("Deleted node from end: %d\n", last->data);
        free(last);
        last = NULL;
    } else {
        while (temp->next != last) {
            temp = temp->next;
        }
        temp->next = last->next;
        printf("Deleted node from end: %d\n", last->data);
        free(last);
        last = temp;
    }
}

// Delete node by value
void deleteNode(int key) {
    if (last == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *current = last->next, *prev = last;
    do {
        if (current->data == key) {
            if (current == last && current == last->next) {
                last = NULL;
            } else {
                if (current == last) last = prev;
                prev->next = current->next;
            }
            free(current);
            printf("Deleted %d.\n", key);
            return;
        }
        prev = current;
        current = current->next;
    } while (current != last->next);

    printf("Element %d not found.\n", key);
}

// Display the list
void display() {
    if (last == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = last->next;
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != last->next);
    printf("(back to start)\n");
}

// Search for an element
void search(int key) {
    if (last == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = last->next;
    int index = 0;
    do {
        if (temp->data == key) {
            printf("Found %d at position %d\n", key, index);
            return;
        }
        temp = temp->next;
        index++;
    } while (temp != last->next);

    printf("Element %d not found.\n", key);
}

// Main menu
int main() {
    int choice, value, position;

    while (1) {
        printf("\n--- Circular Linked List Menu ---\n");
        printf("1. Insert at End\n");
        printf("2. Insert at Front\n");
        printf("3. Insert at Specific Position\n");
        printf("4. Delete from Front\n");
        printf("5. Delete from End\n");
        printf("6. Delete Specific Node\n");
        printf("7. Display List\n");
        printf("8. Search\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to insert at end: ");
            scanf("%d", &value);
            insertEnd(value);
            break;
        case 2:
            printf("Enter value to insert at front: ");
            scanf("%d", &value);
            insertFront(value);
            break;
        case 3:
            printf("Enter value to insert: ");
            scanf("%d", &value);
            printf("Enter position to insert: ");
            scanf("%d", &position);
            insertAtPosition(value, position);
            break;
        case 4:
            deleteFront();
            break;
        case 5:
            deleteEnd();
            break;
        case 6:
            printf("Enter value to delete: ");
            scanf("%d", &value);
            deleteNode(value);
            break;
        case 7:
            display();
            break;
        case 8:
            printf("Enter value to search: ");
            scanf("%d", &value);
            search(value);
            break;
        case 9:
            printf("Exiting...\n");
            exit(0);
        default:
            printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}